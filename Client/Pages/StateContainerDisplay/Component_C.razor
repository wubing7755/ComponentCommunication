@inject IStateContainer<Player> Ns

<h4>Component_C</h4>

@{
    if (ChildComponentPlayers.Count > 0)
    {
        <table>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Health</th>
                <th scope="col">IsAlive</th>
                <th scope="col">Action</th>
            </tr>
            @foreach (var player in ChildComponentPlayers)
            {
                <tr>
                    <th scope="row">@player.Name</th>
                    <td>@player.Health</td>
                    <td>@player.IsAlive</td>
                    <td><button @onclick="() => DeletePlayer(player)">Delete</button></td>
                </tr>
            }
        </table>
    }
}

@code {
    public List<Player> ChildComponentPlayers { get; set; } = new List<Player>();
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        Ns.OnChange += SubscribEvent;
    }
    
    public void SubscribEvent(object players)
    {
        ChildComponentPlayers = (List<Player>)players;
        
        StateHasChanged();
    }

    public void Dispose()
    {
        Ns.OnChange -= SubscribEvent;
    }
    
    private void DeletePlayer(Player player)
    {
        if (ChildComponentPlayers.Contains(player))
        {
            ChildComponentPlayers.Remove(player);
            Ns.NotifyStateChanged(this.ChildComponentPlayers);
            StateHasChanged();
        }
    }
}
